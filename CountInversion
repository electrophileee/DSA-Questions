#include <bits/stdc++.h>

   long long int  merge(long long *arr , int low, int mid , int high)
  {
      long long int count=0; 
     int left =low,right=mid+1;
     
     vector<int>temp;
     
     while(left<=mid&&right<=high)
     {
         if(arr[left]<=arr[right])
         {
             temp.push_back(arr[left]);
             left++;
         }else{
             count += (mid-left+1);
             temp.push_back(arr[right]);
             right++;
         }
     }
     
     while(left<=mid)
     {
         temp.push_back(arr[left++]);
     }
     while(right<=high)
     {
         temp.push_back(arr[right++]);
     }
     
    for(int i=low;i<=high;i++)
    {
        arr[i] = temp[i-low];
    }
     return count;
      
     
  }
  
   
  long long  mergeSort(long long *arr ,int low ,int high)
  {
      long long count=0;
      if(low>=high) return count;
       
      int mid = (high+low)/2;
       
      count+= mergeSort(arr , low ,mid);
      count+= mergeSort(arr ,mid+1,high);
      count+=merge(arr ,low ,mid ,high);
       
      return count;
  }
long long getInversions(long long *arr, int n){
    // Write your code here.
    return mergeSort(arr ,0,n-1);
}
