/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */
 Node * merge(Node* a ,Node * b){
	 Node * dummy= new Node(0);
	 Node * ptr = dummy;

	 while(a&&b){
		 if(a->data<b->data){
			 ptr->child=a;
			 a=a->child;
			 ptr=ptr->child;
		 }else{
			 ptr->child=b;
			 b=b->child;
			 ptr=ptr->child;
		 }
	 }
	 if(a) ptr->child=a;
	 else ptr->child=b;

	 return dummy->child;
 }

 Node*flatten(Node* head){

	 if(head==NULL|| head->next==NULL){
		 return head;
	 }

	 Node *newNode = flatten(head->next);
	 head->next=NULL;
	 head = merge(head,newNode);

	 return head;
 }

Node* flattenLinkedList(Node* head) 
{
	return flatten(head);
}
